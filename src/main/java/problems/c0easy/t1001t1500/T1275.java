package problems.c0easy.t1001t1500;

/**
 * 1275 找出井字棋的获胜者 https://leetcode.cn/problems/find-winner-on-a-tic-tac-toe-game/description/
 * A 和 B 在一个 3 x 3 的网格上玩井字棋。
 * 井字棋游戏的规则如下：
 * 玩家轮流将棋子放在空方格 (" ") 上。
 * 第一个玩家 A 总是用 "X" 作为棋子，而第二个玩家 B 总是用 "O" 作为棋子。
 * "X" 和 "O" 只能放在空方格中，而不能放在已经被占用的方格上。
 * 只要有 3 个相同的（非空）棋子排成一条直线（行、列、对角线）时，游戏结束。
 * 如果所有方块都放满棋子（不为空），游戏也会结束。
 * 游戏结束后，棋子无法再进行任何移动。
 * 给你一个数组 moves，其中每个元素是大小为 2 的另一个数组（元素分别对应网格的行和列），
 * 它按照 A 和 B 的行动顺序（先 A 后 B）记录了两人各自的棋子位置。
 * 如果游戏存在获胜者（A 或 B），就返回该游戏的获胜者；如果游戏以平局结束，
 * 则返回 "Draw"；如果仍会有行动（游戏未结束），则返回 "Pending"。
 * 你可以假设 moves 都 有效（遵循井字棋规则），网格最初是空的，A 将先行动
 *
 * 示例：
 * 输入1：moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]
 * 输出1："A"
 *
 * 输入2：moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
 * 输出2："B"
 *
 * 输入3：moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
 * 输出3："Draw"
 *
 * 输入4：moves = [[0,0],[1,1]]
 * 输出4："Pending"
 */
public class T1275 {
    /**
     * 官方解法：模拟
     * 轮流在棋盘上填充 1 和 -1，检查每行每列和对角线之和绝对值是否为3即可
     * 1 代表 A，-1 代表 B
     */
    public String tictactoe(int[][] moves) {
        int[][] tmp = new int[3][3];
        int i = 1;
        // 轮流在棋盘上填充 1 和 -1
        for (int[] move : moves) {
            tmp[move[0]][move[1]] = i;
            i = -i;
        }
        // 检查对角线之和绝对值是否为3
        if (Math.abs(tmp[0][0] + tmp[1][1] + tmp[2][2]) == 3 ||
        Math.abs(tmp[0][2] + tmp[1][1] + tmp[2][0]) == 3) {
            // 这种情况 1,1 必有值，用其进行判断
            return tmp[1][1] > 0 ? "A" : "B";
        }
        // 检查每行每列之和绝对值是否为3
        for (int j = 0; j < 3; j++) {
            if (Math.abs(tmp[j][0] + tmp[j][1] + tmp[j][2]) == 3 ||
            Math.abs(tmp[0][j] + tmp[1][j] + tmp[2][j]) == 3) {
                // j,j 肯定有值，用其进行判断
                return tmp[j][j] > 0 ? "A" : "B";
            }
        }
        // 如果步数用完，表示平局返回 Draw，未用完返回 Pending
        return moves.length == 9 ? "Draw" : "Pending";
    }
}
