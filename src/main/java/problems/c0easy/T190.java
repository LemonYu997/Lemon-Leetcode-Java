package problems.c0easy;

/**
 * 190 颠倒二进制位 https://leetcode.cn/problems/reverse-bits/
 * 颠倒给定32位无符号整数的二进制位
 *
 * 示例：
 * 输入1：n = 00000010100101000001111010011100
 * 输出1：964176192 (00111001011110000010100101000000)
 * 备注：输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 * 因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000
 *
 * 输入2：n = 11111111111111111111111111111101
 * 输出2：3221225471 (10111111111111111111111111111111)
 * 备注：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 * 因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111
 */
public class T190 {
    /**
     * 官方解法1：逐位颠倒
     * 将n视作一个长为32位的二进制串，从低位到高位枚举n的每一位，将其倒序添加到结果中
     */
    public int reverseBits(int n) {
        int rev = 0;
        for (int i = 0; i < 32 && n != 0; i++) {
            rev |= (n & 1) << (31 - i);
            n >>>= 1;
        }

        return rev;
    }
}
